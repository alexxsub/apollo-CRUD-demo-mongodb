const { ApolloServer, gql } = require("apollo-server");
const mongoose = require("mongoose");
// —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ö–µ–º—É –ë–î
// creating new schema of data base
const PhoneSchema = new mongoose.Schema({
  number: {
    type: String,
    required: true,
    unique: true, // number - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤ —Å–ª—É—á–∞–µ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–µ–º—É –∫–∞–∫ –∫–ª—é—á—É
    trim: true
  },
  name: {
    type: String,
    required: true
  }
});
//–î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
PhoneSchema.index({
  "$**": "text"
});

// Create presave trigger for example
// –ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –æ–ø–∏—Å–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä –Ω–∞ —Å–æ–±—ã—Ç–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ —à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î, –ø–∞—Ä–æ–ª—å, –∫–∞–∫ –≤–∞—Ä–∏–∞–Ω—Ç
PhoneSchema.pre("save", function(next) {
  //this.<fieldname>
  next();
});

// –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
// context variable
const Phone = mongoose.model("Phone", PhoneSchema);

mongoose
  .connect(
    "mongodb://localhost:27017/phones_simple",
    { useNewUrlParser: true, useCreateIndex: true, useFindAndModify: false }
  )
  .then(() => console.log("üöÄ   –ë–∞–∑–∞ –≤–∑–ª–µ—Ç–µ–ª–∞!"))
  .catch(err => console.error(err));

//types for graphql
// –û–ø–∏—Å—ã–≤–∞–µ–º API –Ω–∞ gql —è–∑—ã–∫–µ. 
const typeDefs = gql`
  type Query {
    """
    Get all phones
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
    """
    Phones: [Phone]
    """
    Search phones
    –ü–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    """
    searchPhones(searchTerm: String): [Phone]
    """
    Find record of phone list by number
    –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ –ø–æ –Ω–æ–º–µ—Ä—É
    """
    findNamber(number: String): Phone
  }
  type Phone {
    id: ID
    """
    Number of phone
    –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    """
    number: String
    """
    Name of person
    –ò–º—è –ø–µ—Ä—Å–æ–Ω—ã
    """
    name: String
  }
  # type for creating new record, all creation params are required
  # —Ç–∏–ø –≤–≤–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏, –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
  input AddInputPhone {
    number: String!
    name: String!
  }
  # type for updating record, params are not required that is how it differs from creation parameters AddInputPhone
  # —Ç–∏–ø –≤–≤–æ–¥–∞ –¥–ª–¥—è –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã, —Ç–µ–º –∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è
  input UpdateInputPhone {
    number: String
    name: String
  }
  type Mutation {
    #example with separated params
    #–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞–∑–¥–µ–ª—å–Ω–æ
    addPhone(number: String, name: String): Phone!
    
    #example with input type
    #–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–º, –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–∏–ø
    addPhoneByInput(input: AddInputPhone): Phone! 
    
    # deleting record after find number that must be uniqie
    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –Ω–æ–º–µ—Ä - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    deletePhone(number: String): [Phone] 
    
    # id - primary key and unique
    # id  -—ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á, –ø–æ –Ω–µ–º—É –º–æ–∂–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –∑–∞–ø–∏—Å—å
    deletePhoneByID(id: ID): Boolean 

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    updatePhoneByID(id: ID, input:UpdateInputPhone): Phone!
    #example with separated params
    #–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    updatePhone(number: String, name: String): Phone! 
  }
`;
//resolvers for graphql API
// —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ API
const resolvers = {
  Phone: {
    name: root => {
      if (root.number === "5555") {
        //find number 5555 and hide name of person
        // –ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –ø–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤—ã–æ–¥–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ
        return "*censored*";
      } else {
        return root.name;
      }
    }
  },
  Query: {
    //https://docs.mongodb.com/master/reference/operator/query/regex/#op._S_regex
    //https://docs.mongodb.com/manual/reference/operator/query/text/#text-query-examples
    Phones: async (_, args, { Phone }) => {
      const phones = await Phone.find({}).limit(50);

      return phones;
    },
    searchPhones: async (_, { searchTerm }, { Phone }) => {
      var phones = [];

      if (searchTerm) {
        phones = await Phone.find(
          { $text: { $search: searchTerm } },
          { score: { $meta: "textScore" } }
        )
          .sort({
            score: { $meta: "textScore" }
          })
          .limit(50);
        //.sort({ <field>: "desc" });
      } else phones = await Phone.find().limit(50);

      return phones;
    },
    findNamber: async (_, { number }, { Phone }) =>
      await Phone.findOne({ number })
  },
  Mutation: {
    addPhone: async (_, { number, name }, { Phone }) => {
      const newPhone = await new Phone({
        number,
        name
      }).save();
      return newPhone;
    },
    addPhoneByInput: async (_, { input }, { Phone }) => {
      return await  new Phone(input).save();
      
    },
    deletePhone: async (_, { number }, { Phone }) => {
     return await Phone.findOneAndRemove({ number });
      
    },
    deletePhoneByID: async (_, { id }, { Phone }) => {
      const phone = await Phone.findByIdAndRemove({ _id: id });
      return phone ? true : false;
    },
    updatePhone: async (_, { number, name }, { Phone }) => {
      const updatedPhone = await Phone.findOneAndUpdate(
        { $or: [{ number }, { name }] },
        { $set: { number, name } },
        { new: true }
      );
    
      return updatedPhone;
    },
    updatePhoneByID: async (_, { id, input }, { Phone }) => {
      const updatedPhone = await Phone.findByIdAndUpdate(
        { _id: id },
          input ,
        { new: true },
        (err, res) => {
          if (err) console.error(err);
        }
      );
      return updatedPhone;
    }
  }
};
//–ù–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–ø–æ–ª–ª–æ
const server = new ApolloServer({
  typeDefs,
  resolvers,
  context: { Phone }
});
//–ß–∏—Ç–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞
const HOST = process.argv[2];
const PORT = process.argv[3];

server.listen({ host: HOST, port: PORT }).then(({ url }) => {
  console.log(`üöÄ   –í–∑–ª–µ—Ç–µ–ª —Å–µ—Ä–≤–µ—Ä ${url}`);
});
//  sudo netstat -tulpn|grep 4000